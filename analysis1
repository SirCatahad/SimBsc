library("ggplot2")
library("gridExtra")

source("init.R")
source("sim_functions.R")


## Read in all the files
files <- list.files(path = outputDir, pattern = "\\.rds$", full.names = TRUE)
df <- lapply(files, readRDS)

## We now have a list of lists of data frames
df <- do.call("rbind", df)
##After this we have a list of data frames
df <- do.call("rbind", df)
##Now we have the combined data frame

## For some reason all saved data were characters, so we need to transform them
df[c("Slope X", "conf.slope.X.low", "conf.slope.X.high", "Iteration")] <- sapply(df[c("Slope X", "conf.slope.X.low", "conf.slope.X.high", "Iteration")], as.numeric)


## Check whether all iterations converge
all(is.na(df$Error))

##No errors found as the line above returned true, moving on

### Analysis and Visualization
## Bias estimations -----------------------------------------------------------------------------------------------------


bias_df <- df
## First, zero all conditions
complete_df <- data.frame(matrix(0,nrow=93,0))

## Bias is calculated as: 1/iter * sum_i=1_nsim ( theta_hat_i - theta ).
## First, we get each deviation
bias_df[grepl('cov3.33', bias_df$Condition),"Slope X"] <- bias_df[grepl('cov3.33', bias_df$Condition),"Slope X"] - betav[2]
bias_df[grepl('cov10', bias_df$Condition),"Slope X"] <- bias_df[grepl('cov10', bias_df$Condition),"Slope X"] - betav[3]

## Then we sum (per condition) and divide by nsum(iter)
complete_df[c("Condition", "Slope X")] <- aggregate(bias_df["Slope X"], by=bias_df["Condition"], FUN=(function(x) sum(x)/iter))

## MCSE(Bias) is calculated by: sqrt(1/nsim-1 * sum_i=1_nsim((theta_hat_i - theta_mean)^2)/nsim). This means we need a
## Theta_mean by condition
bias_df["Slope Mean Group"] <- ave(x=unlist(df["Slope X"]), df["Condition"])


## Now calculate Monte carlo standard error of bias (MCSE(Bias))
complete_df[c("Condition", "Slope.SE")] <- aggregate(bias_df["Slope X"], by=bias_df["Condition"],
                                                     FUN=function(x) sqrt((1/(iter-1)*sum((x^2)))/iter ))

## And finally Monte Carlo CIs
complete_df["slp.low"] <- sapply(complete_df["Slope X"], FUN= (function(x,y) x - 1.96*y), complete_df["Slope.SE"])
complete_df["slp.high"] <- sapply(complete_df["Slope X"], FUN= (function(x,y) x + 1.96*y), complete_df["Slope.SE"])

rm(bias_df)


## Coverage of confidence Intervals-----------------------------------------------------------------------------------------------------
## Coverage of confidence intervals: How often does the true population parameter lie in the
## estimated 95% confidence interval?

##New column that tells us whether the true population parameter lies in the confidence interval for each
##Iteration in each condition
df["CI_slp_cov"] <- NA

##Logical column whether the true parameter lies in the 95% confidence interval
df[grepl('cov0', df$Condition), "CI_slp_cov"] <- mapply(FUN=(function(x,y) 
  ifelse((betav[1] >= x && betav[1] <= y), 1, 0)),
  y=df[grepl('cov0', df$Condition), "conf.slope.X.high"],
  x=df[grepl('cov0', df$Condition), "conf.slope.X.low"])

df[grepl('cov3.33', df$Condition), "CI_slp_cov"] <- mapply(FUN=(function(x,y) 
  ifelse((betav[2] >= x && betav[2] <= y), 1, 0)),
  y=df[grepl('cov3.33', df$Condition), "conf.slope.X.high"],
  x=df[grepl('cov3.33', df$Condition), "conf.slope.X.low"])

df[grepl('cov10', df$Condition), "CI_slp_cov"] <- mapply(FUN=(function(x,y) 
  ifelse((betav[3] >= x && betav[3] <= y), 1, 0)),
  y=df[grepl('cov10', df$Condition), "conf.slope.X.high"],
  x=df[grepl('cov10', df$Condition), "conf.slope.X.low"])






##Percentage of CIs that contain the true population parameter
complete_df[c("Condition", "CI_slp_cov")] <- aggregate(df$CI_slp_cov, by=df["Condition"], FUN= function(x) (sum(x)))
complete_df["CI_slp_cov"] <- complete_df["CI_slp_cov"]/iter


complete_df["CI_slp_cov"] <- complete_df["CI_slp_cov"]*100


## SE of the slope CI coverage
complete_df["CI.slp.se"] <- as.vector(sapply(complete_df$CI_slp_cov, FUN=function(x) sqrt((x*(100-x))/iter)))

## Compute Monte Carlo CIs
complete_df["CIcov.slp.low"] <- as.vector(sapply(complete_df["CI_slp_cov"], FUN= (function(x,y) x - 1.96*y), complete_df$CI.slp.se ))
complete_df["CIcov.slp.high"] <- as.vector(sapply(complete_df["CI_slp_cov"], FUN= (function(x,y) x + 1.96*y), complete_df$CI.slp.se ))


## Empirical standard Error-----------------------------------------------------------------------------------------------------
## The standard deviation of β over 1,000 replications (henceforth the ‘empirical standard error’)

## Empirical SE is calculated as: sqrt(1/(nsim-1) * sum_i=1_nsim ( Theta_hat_i - Theta_mean)^2)
df["Slope_Mean"] <- ave(x=unlist(df["Slope X"]), df["Condition"])


# df["ESE_Slope"] <- mapply(FUN=calcESE, 
#                           df$`Slope X`, 
#                           df$Slope_Mean,
#                           itr=iter)
# 
# complete_df[c("Condition", "ESE")] <- aggregate(df$ESE_Slope,
#                                                 by=df["Condition"],
#                                                 FUN=sum)



complete_df[c("Condition", "ESE")] <- aggregate(df$`Slope X` , 
                                                by=df["Condition"], 
                                                FUN=calcESE,
                                                tm=df$Slope_Mean,
                                                itr=iter)


#Monte Carlo standard error of the empirical standard error
complete_df["MCSE_ESE"] <- as.vector(sapply(complete_df$ESE, FUN= function(x) x/(sqrt(2*(iter-1)))))

#complete_df[c("Condition", "MCSE_ESE")] <- aggregate(df$MCSE_ESE, by=df["Condition"], FUN= function(x) sum(x))

complete_df["SE.slp.low"] <- as.vector(sapply(complete_df["ESE"], FUN= (function(x,y) x - 1.96*y), complete_df$MCSE_ESE ))
complete_df["SE.slp.high"] <- as.vector(sapply(complete_df["ESE"], FUN= (function(x,y) x + 1.96*y), complete_df$MCSE_ESE ))

## Data prep-----------------------------------------------------------------------------------------------------



plot_df_a <- complete_df[grepl('cov0', complete_df$Condition),]
plot_df_b <- complete_df[grepl('cov3.33', complete_df$Condition),]
plot_df_c <- complete_df[grepl('cov10', complete_df$Condition),]

## Plots, drawings and everything neat -----------------------------------------------------------------------------------------------------



p11 <- ggplot(plot_df_a, aes(x=Condition, y=`Slope X`, ymin=slp.low, ymax=slp.high))+
  geom_pointrange()+
  geom_hline(yintercept = 0, linetype=2)+
  coord_flip()+
  xlab('Variable')

p12 <- ggplot(plot_df_b, aes(x=Condition, y=`Slope X`, ymin=slp.low, ymax=slp.high))+
  geom_pointrange()+
  geom_hline(yintercept = 0, linetype=2)+
  coord_flip()+
  xlab('Variable')

p13 <- ggplot(plot_df_c, aes(x=Condition, y=`Slope X`, ymin=slp.low, ymax=slp.high))+
  geom_pointrange()+
  geom_hline(yintercept = 0, linetype=2)+
  coord_flip()+
  xlab('Variable')

grid.arrange(p11, p12, p13, ncol=3, nrow=1, top="Bias")

p21 <- ggplot(plot_df_a, aes(x=Condition, y=CI_slp_cov, ymin=CIcov.slp.low, ymax=CIcov.slp.high))+
  geom_pointrange()+
  geom_hline(yintercept = 95, linetype=2)+
  coord_flip()+
  xlab('Variable')

p22 <- ggplot(plot_df_b, aes(x=Condition, y=CI_slp_cov, ymin=CIcov.slp.low, ymax=CIcov.slp.high))+
  geom_pointrange()+
  geom_hline(yintercept = 95, linetype=2)+
  coord_flip()+
  xlab('Variable')

p23 <- ggplot(plot_df_c, aes(x=Condition, y=CI_slp_cov, ymin=CIcov.slp.low, ymax=CIcov.slp.high))+
  geom_pointrange()+
  geom_hline(yintercept = 95, linetype=2)+
  coord_flip()+
  xlab('Variable')

grid.arrange(p21, p22, p23, ncol=3, nrow=1, top="Confidence interval Coverage")



p31 <- ggplot(plot_df_a, aes(x=Condition, y=ESE, ymin=SE.slp.low, ymax=SE.slp.high))+
  geom_pointrange()+
  #geom_hline(yintercept = 0, linetype=2)+
  coord_flip()+
  xlab('Variable')

p32 <- ggplot(plot_df_b, aes(x=Condition, y=ESE, ymin=SE.slp.low, ymax=SE.slp.high))+
  geom_pointrange()+
  #geom_hline(yintercept = 0, linetype=2)+
  coord_flip()+
  xlab('Variable')

p33 <- ggplot(plot_df_c, aes(x=Condition, y=ESE, ymin=SE.slp.low, ymax=SE.slp.high))+
  geom_pointrange()+
  #geom_hline(yintercept = 0, linetype=2)+
  coord_flip()+
  xlab('Variable')

grid.arrange(p31, p32, p33, ncol=3, nrow=1, top="Empirical SE")


# makePlot <- function(data, xint, title, x, xlow, xhigh, y, xlimits)
# {
#   plt <- ggplot(data, aes(col=color,group=method, xmin=xlow, x=x, xmax=xhigh))+
#     geom_pointrange(aes(y = y))+
#     #geom_linerange(aes(x=Intercept, ymin=Condition, ymax=Condition, xmin=conf.intercept.low, xmax=conf.intercept.high)) +
#     labs(title=title)+
#     #  coord_flip()+
#     theme(plot.title = element_text(hjust = 0.5),
#           strip.text.y.left = element_text(angle = 0),
#           panel.spacing.y=unit(.5,"lines"),
#           # Remove background
#           panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
#           #panel.background = element_blank(), axis.line = element_line(colour = "black"),
#           #Remove y ticks and labels
#           axis.title.y=element_blank(),
#           axis.text.y=element_blank(),
#           axis.ticks.y=element_blank(),
#           #Place labels outside
#           strip.placement = "outside",
#           strip.background =element_rect(fill="white"),
#           #Place legend at the top
#           legend.position="top"
#     )+
#     scale_color_manual(values=c("black","red","green","blue")) +
#     scale_x_continuous(limits=xlimits)+
#     facet_grid(rows=vars(method,k),
#                scales="free",
#                space="free_y",
#                drop=TRUE,
#                switch="y",
#                labeller = function (labels) {
#                  labels <- lapply(labels, as.character)
#                  list(do.call(paste, c(labels, list(sep = "\n"))))
#                })+ 
#     geom_vline(xintercept = xint)
#   plt
# }



## TO - DO List -----------------------------------------------------------------------------------------------------


## TO - DO
## Find out how exactly MCCIs work                            (https://onlinelibrary.wiley.com/doi/full/10.1002/sim.8086 ?)
## Empirical Standard Errors                                  (https://cran.r-project.org/web/packages/rsimsum/vignettes/A-introduction.html)
## cbind all data frames, plot stuff                          (done)
## Figure out how to properly space in ggplot                 (done)
## fix xlimits                                                (kinda done)
